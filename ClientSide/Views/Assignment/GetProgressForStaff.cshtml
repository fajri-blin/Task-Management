@model IEnumerable<ClientSide.ViewModels.Assignment.GetForStaffVM>

@{
    ViewData["Title"] = "GetProgressForStaff";
}

<style>
    .card-title h5,
    .card-title h6 {
        margin-bottom: 5px;
    }

    .progress-item.text,
    .progress-item {
        color: black; /* Set the text color to black */
    }
    .no-line {
        border-top: none;
    }

    .badge-not-started {
        background-color: gray;
    }

    .badge-in-progress {
        background-color: yellow;
    }

    .badge-checking {
        background-color: orange;
    }

    .badge-revision {
        background-color: red;
    }

    .badge-done {
        background-color: green;
    }

    .cards {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        max-width: 100%; /* To ensure cards don't overflow the container */
    }

    .card {
        flex-basis: calc(33.33% - 1rem);
        margin-bottom: 1rem;
        width: 18rem; /* Set a fixed width for each card */
    }

    .hidden {
        display: none;
    }
</style>


<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4">
            <span class="text-muted fw-light">Progress /</span>
            Progress View
        </h4>
        <div class="row mb-3">
            <div class="col">
                <input type="text" id="searchInput" class="form-control" placeholder="Search by title or category">
            </div>
        </div>
        <div class="cards">
            @foreach (var item in Model)
            {
                <div class="card flex-row m-2" style="width: 18rem;">
                    <a href="@Url.Action("Index", "Progress", new { guid = item.AssignmentGuid })" class="card-link">
                        <div class="card-body">
                                <div class="card-title d-flex flex-column">
                                    <h5>@Html.DisplayFor(modelItem => item.AssignmentName)</h5>
                                    <h6>@Html.DisplayFor(modelItem => item.ManagerName)</h6>
                                <h6 id="dueDate">@Html.DisplayFor(modelItem => item.DueDate)</h6>
                                </div>
                                <div class="progress-items">
                                    @for (var i = 0; i < item.ListProgress.Count; i++)
                                    {
                                        <div class="progress-item @((i == item.ListProgress.Count - 1) ? "no-line" : "") text">
                                            @item.ListProgress[i].Description
                                        </div>
                                        <div class="progress-item @((i == item.ListProgress.Count - 1) ? "no-line" : "")">
                                            @if (item.ListProgress[i].StatusProgress == Task_Management.Utilities.Enum.StatusEnum.NotStarted)
                                            {
                                                <span class="badge badge-not-started">@item.ListProgress[i].StatusProgress</span>
                                            }
                                            @if (item.ListProgress[i].StatusProgress == Task_Management.Utilities.Enum.StatusEnum.InProgress)
                                            {
                                                <span class="badge badge-in-progress">@item.ListProgress[i].StatusProgress</span>
                                            }
                                            @if (item.ListProgress[i].StatusProgress == Task_Management.Utilities.Enum.StatusEnum.Checking)
                                            {
                                                <span class="badge badge-checking">@item.ListProgress[i].StatusProgress</span>
                                            }
                                            @if (item.ListProgress[i].StatusProgress == Task_Management.Utilities.Enum.StatusEnum.Revision)
                                            {
                                                <span class="badge badge-revision">@item.ListProgress[i].StatusProgress</span>
                                            }
                                            @if (item.ListProgress[i].StatusProgress == Task_Management.Utilities.Enum.StatusEnum.Done)
                                            {
                                                <span class="badge badge-done">@item.ListProgress[i].StatusProgress</span>
                                            }
                                        </div>

                                        @if (i < item.ListProgress.Count - 1)
                                        {
                                            <hr />
                                        }
                                    }
                                </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
</div>


@section Scripts {
    <!-- Moment.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <script>
        // Format the DueDate using Moment.js and replace the content of the #dueDate element for each assignment card
        document.addEventListener('DOMContentLoaded', function () {
            const dueDateElements = document.querySelectorAll('#dueDate');
            dueDateElements.forEach(dueDateElement => {
                const dueDateValue = dueDateElement.textContent;
                const formattedDueDate = moment(dueDateValue).format('D MMMM YYYY - h:mm A');
                dueDateElement.textContent = formattedDueDate;
            });
        });

        $(document).ready(function () {
            $('#searchInput').on('keyup', function () {
                var value = $(this).val().toLowerCase();
                $(".card").each(function () {
                    var title = $(this).find('.card-title').text().toLowerCase();
                    var categories = $(this).find('.badge').text().toLowerCase();
                    if (title.indexOf(value) > -1 || categories.indexOf(value) > -1) {
                        $(this).removeClass('hidden');
                    } else {
                        $(this).addClass('hidden');
                    }
                });
            });
        });

        //$(document).ready(function () {
        //    $('#searchInput').on('keyup', function () {
        //        var value = $(this).val().toLowerCase();
        //        $(".card").filter(function () {
        //            var title = $(this).find('.card-title').text().toLowerCase();
        //            var categories = $(this).find('.badge').text().toLowerCase();
        //            $(this).toggle(title.indexOf(value) > -1 || categories.indexOf(value) > -1)
        //        });
        //    });
        //});
    </script>
}