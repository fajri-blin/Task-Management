// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_Management.Data;

#nullable disable

namespace Task_Management.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20230720072713_AddingAdditionalTable")]
    partial class AddingAdditionalTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Task_Management.Model.Data.Account", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("ImageProfile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_profile");

                    b.Property<bool>("IsUsedOTP")
                        .HasColumnType("bit")
                        .HasColumnName("is_used_otp");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("OTP")
                        .HasColumnType("int")
                        .HasColumnName("otp");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Guid");

                    b.HasIndex("Email", "Username")
                        .IsUnique();

                    b.ToTable("tb_m_accounts");
                });

            modelBuilder.Entity("Task_Management.Model.Data.AccountProgress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid?>("AccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("ProgressGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("progress_guid");

                    b.HasKey("Guid");

                    b.HasIndex("AccountGuid");

                    b.HasIndex("ProgressGuid");

                    b.ToTable("tb_tr_account_progress");
                });

            modelBuilder.Entity("Task_Management.Model.Data.AccountRole", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid?>("AccountGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("RoleGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_guid");

                    b.HasKey("Guid");

                    b.HasIndex("AccountGuid");

                    b.HasIndex("RoleGuid");

                    b.ToTable("tb_tr_account_roles");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Additional", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("filedata");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("filename");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("filetype");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("ProgressGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("progress_guid");

                    b.HasKey("Guid");

                    b.HasIndex("ProgressGuid");

                    b.ToTable("tb_m_additional");
                });

            modelBuilder.Entity("Task_Management.Model.Data.AssignMap", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid?>("AssignmentGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_guid");

                    b.Property<Guid?>("CategoryGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.HasKey("Guid");

                    b.HasIndex("AssignmentGuid");

                    b.HasIndex("CategoryGuid");

                    b.ToTable("tb_tr_assign_maps");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Assignment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<Guid?>("ManagerGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("manager_guid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Guid");

                    b.HasIndex("ManagerGuid");

                    b.ToTable("tb_m_assignemts");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Category", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_categories");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Progress", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("Additional")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("additional");

                    b.Property<Guid?>("AssignmentGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assignment_guid");

                    b.Property<bool>("CheckMark")
                        .HasColumnType("bit")
                        .HasColumnName("check_mark");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("MessageManager")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manager_message");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Guid");

                    b.HasIndex("AssignmentGuid");

                    b.ToTable("tb_m_progresses");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_roles");
                });

            modelBuilder.Entity("Task_Management.Model.Data.AccountProgress", b =>
                {
                    b.HasOne("Task_Management.Model.Data.Account", "Account")
                        .WithMany("AccountProgresses")
                        .HasForeignKey("AccountGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Task_Management.Model.Data.Progress", "Progress")
                        .WithMany("AccountProgress")
                        .HasForeignKey("ProgressGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Task_Management.Model.Data.AccountRole", b =>
                {
                    b.HasOne("Task_Management.Model.Data.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountGuid");

                    b.HasOne("Task_Management.Model.Data.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Additional", b =>
                {
                    b.HasOne("Task_Management.Model.Data.Progress", "Progress")
                        .WithMany("Additionals")
                        .HasForeignKey("ProgressGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Task_Management.Model.Data.AssignMap", b =>
                {
                    b.HasOne("Task_Management.Model.Data.Assignment", "Assignment")
                        .WithMany("AssignMaps")
                        .HasForeignKey("AssignmentGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Task_Management.Model.Data.Category", "Category")
                        .WithMany("AssignMaps")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Assignment");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Assignment", b =>
                {
                    b.HasOne("Task_Management.Model.Data.Account", "Account")
                        .WithMany("Assignments")
                        .HasForeignKey("ManagerGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Progress", b =>
                {
                    b.HasOne("Task_Management.Model.Data.Assignment", "Assignment")
                        .WithMany("Progresses")
                        .HasForeignKey("AssignmentGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Account", b =>
                {
                    b.Navigation("AccountProgresses");

                    b.Navigation("AccountRoles");

                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Assignment", b =>
                {
                    b.Navigation("AssignMaps");

                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Category", b =>
                {
                    b.Navigation("AssignMaps");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Progress", b =>
                {
                    b.Navigation("AccountProgress");

                    b.Navigation("Additionals");
                });

            modelBuilder.Entity("Task_Management.Model.Data.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
